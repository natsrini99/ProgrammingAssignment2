my_name<-c(my_char,"Srinivasan Natarajan")
my_name
paste(my_name,collapse=" ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44.NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_na<-my_data==NA
my_data==NA
sum(my_data,na.rm=TRUE)
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,4,5)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
c(foo=11,bar=2,norf=NA)
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributed(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Seab")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(my_matrix,patients)
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
?colnames
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
info()
5!==7
!5==7
FALSE&FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xoer(5==6,!FALSE)
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainger(4,div=2)
remainder(4,div=2)
args(remainder)
submit()
?stdin
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1,6})
evaluate(function(x){x+1},6})
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length[x]]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Good","Morning")
submit()
telegram("Good","Morning")
telegram("Good","Morning")
submit()
telegram("Good","Morning")
submit()
mad_lib("Chennai","APEC","swiping")
mad_libs("Chennai","APEC","swiping")
submit()
submit()
I %p% "love R!"
"I" %p% "love R!"
info()
'I' %p% 'love R!'
"I" %p% "love" %p% "R!"
bye()
quit()
vector(10,5)
vector("Integer",5)
vector("integer",5)
unique(c(10,3,4,5,10,3,4,5,10,11,12,15))
xor(FALSE,FALSE)
xor(TRUE,TRUE)
x <- rep(5,50)
x
x <- rep(5,6)
x
dim(x)<- c(3,2)
x
?cbind
my_data<-cbind(c('X','Y','Z'),x)
my_data
my_data<-rbind(c('A','B'),x)
my_data
my_data1<-cbind(c('X','Y','Z'),my_data)
x<-4L
class(x)
x<-c(4,TRUE)
x
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
my_mat<-rbind(x,y)
dim(my_mat)
x <- list(2, "a", "b", TRUE)
class(x[[1]])
x[[1]]
x <- 1:4
y <- 2
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
x
getwd()
?data.frame
my_data<-read.csv("hw1_data.csv",header=TRUE)
my_data
head(my_data,2)
length(my_data)
sum(my_data)
tail(my_data,2)
my_data[[47]]
my_data[47]
my_data(47)
my_data[47,1]
my_data[47,]
my_data_ozone_missing<- is.na.data.frame(my_data)
my_data_ozone_missing
my_data_ozone_missing[["Ozone"],TRUE]
my_data_ozone_missing[["Ozone"]]
my_data_ozone_missing[,1]
my_data_ozone_missing[0,1]
my_data_ozone_missing$Ozone
?"$.data.frame"
my_data_ozone_missing[ ,1]
my_data[ ,1]
my_data_ozone_missing[ ,1]==TRUE
isTRUE(my_data_ozone_missing[ ,1])
factor(my_data_ozone_missing[ ,1])
table(factor(my_data_ozone_missing[ ,1]))
mean(my_data$Ozone[!is.na(my_data$Ozone)])
!is.na(my_data$Ozone)
my_data$Ozone[!is.na(my_data$Ozone)]
my_data[ , 5]
max(data$Ozone[data$Month==5 & !is.na(data$Ozone)])
max(my_data$Ozone[my_data$Month==5 & !is.na(my_data$Ozone)])
mean(my_data$Temp[my_data$Month==6])
mean(my_data$Solar.R[my_data$Ozone>31 & my_data$Temp>90])
mean(my_data$Solar.R[my_data$Ozone>31 & my_data$Temp>90] & !is.na(my_data$Ozone))
mean(my_data$Solar.R[my_data$Ozone>31 & my_data$Temp>90 & !is.na(my_data$Ozone)])
a <- available.packages()
head(rownames(a),3)
head(rownames(a),100)
install.packages("slidify")
install.packages("ggplot2")
library("ggplot2")
library(ggplot2)
search()
install.packages("KernSmooth")
library(KernSmooth)
find.package("devtools")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
exit
quit()
swirl()
?swirl
library("swirl")
rm(list=ls())
library("swirl")
?
swirlt()
?swirl
info()
main()
swirl()
swirl()
swirl(())
swirl()
plqy()
play()
swirl()
swirl()
for (i in 1:10){print i}
for (i in 1:10){print (i)}
x <- ("a","b","c","d")
x <- c("a","b","c","d")
for (i in seq_along(x)){print(x[1])}
for (i in seq_along(x)){print(x[i])}
for (letter in X){print(letter)}
for(letter in X){print(letter)}
for(letter in x){print(letter)}
x <- matrix(1:8,2,4)
x
for (i in seq_len(nrows(x))){}
for (i in seq_len(nrows(x))){+}
for (i in seq_len(nrows(x))){for (j in seq_len(ncol(x))){print(x[i,j])}}
for (i in seq_len(nrow(x))){for (j in seq_len(ncol(x))){print(x[i,j])}}
count <-0
while(count<10){print(count) count<=count+1}
while(count<10){print(count) count<-count+1}
while(count<10){print(count) count <- count+1}
while(count<10){print(count) count <- count+1}
source('C:/Machine-Learning/R-Programming/R-Workspace/fn_hello.R')
fn_hello
fn_hello()
ls()
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(1,2,3,4,5,6,))
my_mean(c(1,2,3,4,5,6))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6.7.9,8.8))
evaluate(sd,c(1.4,3.6.7,9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[lenght(X)]},c(8,4,0))
evaluate(function(x){x[length(X)]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("programming","is","fun")
paste("programming","is","fun!")
paste("Programming","is","fun!")
submit()
telegram("Hell","SriBala")
telegram("Hello","SriBala")
submit()
submit()
mad_libs(c(place="Nemili",adjective="One hundred",noun="monitoring"))
submit()
'I Love'%p%'R!'
'I' 'Love'%p%'R!'
'I'%p%'Love'%p%'R!'
'I'%p%'love'%p%'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(3,4,5,5,5,6,6)
unique(c(3,4,5,5,5,6,6))
unique_vals<- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
swirtl()
swirl()
da<-Sys.Date()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
POSIXlt(Sys.time())
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17,1986 08:24"
t3<-"October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
play()
cube <- function(x,n) x^3
cube(3)
x<- 1:10
if(x>5){x<-0}
source('C:/Machine-Learning/R-Programming/R-Workspace/fn_hello.R')
z<-10
f(3)
x<-5
y<-if(x<3){NA}else{10}
y
x<-3L
x
class(x)
exit
exit()
quit()
library("swirl")
swirl()
heaf(flags)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cle_list)
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
?str
lm(y,x)
debug(lm)
lm(y~x)
debug(lm)
lm(y~x)
n
n
n
library(datasets)
?iris
iris
class(iris)
iris$Species="virginica"
x <- iris$Species="virginica"
x <- irs[(iris$Species="virginica"),]
x <- iris[(iris$Species="virginica"),]
x
split(iris,Species)
split(iris,"Species")
nrow(iris)
?split
split(iris,mean(Sepal.length),drop=FALSE,iris$Species)
split(iris,mean(iris$Sepal.Length),drop=FALSE,iris$Species)
x<-iris$Species
y<-split(iris,x = )
y<-split(iris,x)
y
iris
mean(c(89,72,94,69))
mean(c(96,74,87,78))
mean(c(7921,5184,8836,4761))
4761-6675.5
8836-4761
-1914.5/4075
setwd("C:/Srini/Coursera-Assignment/R-Prog-Assignment-2/ProgrammingAssignment2/ProgrammingAssignment2")
l
ls
ls()
x <- c(rnorm(100),10,10)
x
makeCacheMatrix(x)
source('C:/Srini/Coursera-Assignment/R-Prog-Assignment-2/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
cacheSolve(x)
det(x)
x
det(x)
dim(x)
x
x <- matrix(c(rnorm(100),10,10))
x
makeCacheMatrix(x)
det(x)
x
x <- matrix(rnorm(100),10,10)
x
det(x)
dim(x)
makeCacheMatrix(x)
cacheSolve(x)
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
x <- matrix(rnorm(10000),100,100)
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
x <- matrix(rnorm(2500),50,50)
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
