x <- rep(5,50)
x
x <- rep(5,6)
x
dim(x)<- c(3,2)
x
?cbind
my_data<-cbind(c('X','Y','Z'),x)
my_data
my_data<-rbind(c('A','B'),x)
my_data
my_data1<-cbind(c('X','Y','Z'),my_data)
x<-4L
class(x)
x<-c(4,TRUE)
x
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
my_mat<-rbind(x,y)
dim(my_mat)
x <- list(2, "a", "b", TRUE)
class(x[[1]])
x[[1]]
x <- 1:4
y <- 2
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
x
getwd()
?data.frame
my_data<-read.csv("hw1_data.csv",header=TRUE)
my_data
head(my_data,2)
length(my_data)
sum(my_data)
tail(my_data,2)
my_data[[47]]
my_data[47]
my_data(47)
my_data[47,1]
my_data[47,]
my_data_ozone_missing<- is.na.data.frame(my_data)
my_data_ozone_missing
my_data_ozone_missing[["Ozone"],TRUE]
my_data_ozone_missing[["Ozone"]]
my_data_ozone_missing[,1]
my_data_ozone_missing[0,1]
my_data_ozone_missing$Ozone
?"$.data.frame"
my_data_ozone_missing[ ,1]
my_data[ ,1]
my_data_ozone_missing[ ,1]==TRUE
isTRUE(my_data_ozone_missing[ ,1])
factor(my_data_ozone_missing[ ,1])
table(factor(my_data_ozone_missing[ ,1]))
mean(my_data$Ozone[!is.na(my_data$Ozone)])
!is.na(my_data$Ozone)
my_data$Ozone[!is.na(my_data$Ozone)]
my_data[ , 5]
max(data$Ozone[data$Month==5 & !is.na(data$Ozone)])
max(my_data$Ozone[my_data$Month==5 & !is.na(my_data$Ozone)])
mean(my_data$Temp[my_data$Month==6])
mean(my_data$Solar.R[my_data$Ozone>31 & my_data$Temp>90])
mean(my_data$Solar.R[my_data$Ozone>31 & my_data$Temp>90] & !is.na(my_data$Ozone))
mean(my_data$Solar.R[my_data$Ozone>31 & my_data$Temp>90 & !is.na(my_data$Ozone)])
a <- available.packages()
head(rownames(a),3)
head(rownames(a),100)
install.packages("slidify")
install.packages("ggplot2")
library("ggplot2")
library(ggplot2)
search()
install.packages("KernSmooth")
library(KernSmooth)
find.package("devtools")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
exit
quit()
swirl()
?swirl
library("swirl")
rm(list=ls())
library("swirl")
?
swirlt()
?swirl
info()
main()
swirl()
swirl()
swirl(())
swirl()
plqy()
play()
swirl()
swirl()
for (i in 1:10){print i}
for (i in 1:10){print (i)}
x <- ("a","b","c","d")
x <- c("a","b","c","d")
for (i in seq_along(x)){print(x[1])}
for (i in seq_along(x)){print(x[i])}
for (letter in X){print(letter)}
for(letter in X){print(letter)}
for(letter in x){print(letter)}
x <- matrix(1:8,2,4)
x
for (i in seq_len(nrows(x))){}
for (i in seq_len(nrows(x))){+}
for (i in seq_len(nrows(x))){for (j in seq_len(ncol(x))){print(x[i,j])}}
for (i in seq_len(nrow(x))){for (j in seq_len(ncol(x))){print(x[i,j])}}
count <-0
while(count<10){print(count) count<=count+1}
while(count<10){print(count) count<-count+1}
while(count<10){print(count) count <- count+1}
while(count<10){print(count) count <- count+1}
source('C:/Machine-Learning/R-Programming/R-Workspace/fn_hello.R')
fn_hello
fn_hello()
ls()
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(1,2,3,4,5,6,))
my_mean(c(1,2,3,4,5,6))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6.7.9,8.8))
evaluate(sd,c(1.4,3.6.7,9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[lenght(X)]},c(8,4,0))
evaluate(function(x){x[length(X)]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("programming","is","fun")
paste("programming","is","fun!")
paste("Programming","is","fun!")
submit()
telegram("Hell","SriBala")
telegram("Hello","SriBala")
submit()
submit()
mad_libs(c(place="Nemili",adjective="One hundred",noun="monitoring"))
submit()
'I Love'%p%'R!'
'I' 'Love'%p%'R!'
'I'%p%'Love'%p%'R!'
'I'%p%'love'%p%'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(3,4,5,5,5,6,6)
unique(c(3,4,5,5,5,6,6))
unique_vals<- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
swirtl()
swirl()
da<-Sys.Date()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
POSIXlt(Sys.time())
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17,1986 08:24"
t3<-"October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
play()
cube <- function(x,n) x^3
cube(3)
x<- 1:10
if(x>5){x<-0}
source('C:/Machine-Learning/R-Programming/R-Workspace/fn_hello.R')
z<-10
f(3)
x<-5
y<-if(x<3){NA}else{10}
y
x<-3L
x
class(x)
exit
exit()
quit()
library("swirl")
swirl()
heaf(flags)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cle_list)
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
?str
lm(y,x)
debug(lm)
lm(y~x)
debug(lm)
lm(y~x)
n
n
n
library(datasets)
?iris
iris
class(iris)
iris$Species="virginica"
x <- iris$Species="virginica"
x <- irs[(iris$Species="virginica"),]
x <- iris[(iris$Species="virginica"),]
x
split(iris,Species)
split(iris,"Species")
nrow(iris)
?split
split(iris,mean(Sepal.length),drop=FALSE,iris$Species)
split(iris,mean(iris$Sepal.Length),drop=FALSE,iris$Species)
x<-iris$Species
y<-split(iris,x = )
y<-split(iris,x)
y
iris
mean(c(89,72,94,69))
mean(c(96,74,87,78))
mean(c(7921,5184,8836,4761))
4761-6675.5
8836-4761
-1914.5/4075
x <- 4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
z <- rbind(x,y)
dim(z)
z
x <- list(2, "a", "b", TRUE)
x[[2]]
y <- x[[2]]
class(x)
class(y)
x <- 1:4
x
y <- 2:3.
y <- 2:3
y
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x <= 5] <- 0
x
hwdata <- read.csv("C:\Srini\Coursera-Assignment\R-Prog-Assignment-1\Quiz\hw1_data.csv")
hwdata <- read.csv("C:\\Srini\\Coursera-Assignment\\R-Prog-Assignment-1\\Quiz\\hw1_data.csv")
hwdata
head(hwdata,2)
nrow(hwdata)
tail(hwdata,2)
hwdata[47,1]
hwdata[is.na(hwdata$Ozone),1]
length(hwdata[is.na(hwdata$Ozone),1])
mean(hwdata$ozone[!hwdata$Ozone])
mean(hwdata$ozone[!hwdata$Ozone,1])
mean(hwdata$ozone[!is.na(hwdata$Ozone),1])
lapply(hwdata$Ozone,mean,!is.na(hwdata$Ozone))
apply(hwdata$Ozone,mean,!is.na(hwdata$Ozone))
hwozone(complete.cases(hwdata$Ozone))
hwozone <- complete.cases(hwdata$Ozone)
hwozone
hwozone <- hwdata[complete.cases(hwdata$Ozone),1]
hwozone
mean(hwozone)
colnames(hwdata)
hwdata[hwdata$Ozone==31 & hwdata$Temp > 90,]
hwdata$Solar.R[hwdata$Ozone==31 & hwdata$Temp > 90]
hwdata[(hwdata$Ozone==31 & hwdata$Temp > 90),1]
hwdata
iris
data("iris")
head(iris,3)
colnames(iris)
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
log.ir
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
ir.pca
wine <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",
sep=",")
wine
library(car)
scatterplotMatrix(wine[2:6])
wine[2:6]
dim[win[2:6]]
dim[wine[2:6]]
dim(wine[2:6])
plot(wine$V4, wine$V5)
Image <- readImage("C:\\SES\\Photos-TeamActivities-CustomerVisit\\ethnic day\\Optimized-DSC_0577.JPG")
install.packages("imager")
load(image)
library(imager)
Image <- image("C:\\SES\\Photos-TeamActivities-CustomerVisit\\ethnic day\\Optimized-DSC_0577.JPG")
?imager
"imager"
imager
?image
Image <- readJPEG("C:\\SES\\Photos-TeamActivities-CustomerVisit\\ethnic day\\Optimized-DSC_0577.JPG")
image
print(image)
from skimage.io import imread
Image <- readJPEG("C:\\SES\\Photos-TeamActivities-CustomerVisit\\ethnic day\\Optimized-DSC_0577.JPG")
Image
print(Image)
class(Image)
dim(Image)
length(Image)
str(Image)
display(Image)
install.packages("RMySQL")
library(RMySQL)
con &lt;- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="nsrini", password = "nsrini", dbname="SriniBalaMySQL")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="nsrini", password = "nsrini", dbname="SriniBalaMySQL")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="nsrini", password = "nsrini", dbname="SriniBalaMySQL@Bala")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="nsrini", password = "nsrini", dbname="Bala")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="Rsrini", password = "nsrini", dbname="Bala")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="root", password = "nsrini", dbname="Bala")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="Rsrini", password = "nsrini", dbname="Bala")
dbDisconnect(con)
dbDisconnect(con)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases";");
dbDiconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases";");
dbDiconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases";");
result <- dbGetQuery(ucscDb,"show databases;");
result
dbDiconnect(ucscDb);
dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
head(allTables)
dbListFields(hg19,"affyU133Plus2");
dbGetQuery(hg19,"select count(*) from affyU133Plus2;")
dbGetQuery(hg19,"select max(matches) from affyU133Plus2;")
affydata <- dbReadTable(hg19,"affyU133Plus2");
head(affydata)
query <- dbSendQuery(hg19, "Select * from affyU133Plus2 where mismatches between 1 and 3")
affyMis <- fetch(query)
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10);
dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library("rhdf5")
created <- h5createFile("example.h5")
created
created <- h5createGroup("example.h5","foo")
created <- h5createGroup("example.h5","baa")
created <- h5createGroup("example.h5","foo/foobaa")
h5ls <- ("example.h5")
example.h5
created
h5ls("example.h5")
clear
library(httr)
require(httpuv)
install.packages("httpuv")
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",
destfile = "q2.csv",
method = "curl")
library(sqldf)
install.packages("sqldf")
library(sqldf)
acs <- read.csv("q2.csv", header = TRUE)
pwd
getwd
getwd()
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "q2.csv", method = "curl")
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "q2.csv")
acs <- read.csv("q2.csv", header = TRUE)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
acs <- read.csv("q2.csv", header = TRUE)
class(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
colnames(acs)
nrow(acs)
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
library(datasets)
data("iris")
data
iris
colnames(iris)
sapply(iris$Sepal.Length,mean)
iris(iris$Species="virginica",)
iris[iris$Species="virginica",]
iris[iris$Species=="virginica",]
sapply(iris[iris$Species=="virginica",],mean(iris$Sepal.Length))
sapply(iris[iris$Species=="virginica",1],mean)
mean(iris[iris$Species=="virginica",1])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
data("mtcars")
with(mtcars, tapply(mpg, cyl, mean))
mtcars
colnames(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
with(mtcars, tapply(hp, cyl, mean))
debug(ls)
ls
debug(ls)
ls
ls()
setwd("C:/Srini/Coursera-Assignment/R-Prog-Assignment-2/ProgrammingAssignment2/ProgrammingAssignment2")
source('C:/Srini/Coursera-Assignment/R-Prog-Assignment-2/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
source('C:/Srini/Coursera-Assignment/R-Prog-Assignment-2/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
